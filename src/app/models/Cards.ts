/* eslint-disable @typescript-eslint/naming-convention */
// Generated by https://quicktype.io

export class CardConstructable implements Card {
    id:               number;
    cardId:           string;
    dbfId:            string;
    name:             string;
    cardSet:          string;
    type?:            string;
    text?:            string;
    playerClass?:     string;
    locale:           string;
    rarity?:          string;
    health?:          number;
    mechanics?:       any;
    faction?:         any;
    elite?:           boolean;
    cost?:            number;
    attack?:          number;
    race?:            any;
    img?:             string;
    spellSchool?:     any;
    flavor?:          string;
    artist?:          string;
    collectible?:     boolean;
    imgGold?:         string;
    durability?:      number;
    howToGetGold?:    string;
    howToGet?:        string;
    armor?:           string;
    multiClassGroup?: string;
    classes?:         any;
    howToGetDiamond?: string;
    constructor(c: Card, i: number) {
            this.id =               i;
            this.cardId =           c.cardId;
            this.dbfId =            c.dbfId;
            this.name =             c.name;
            this.cardSet =          c.cardSet;
            this.type =             c.type || '';
            this.text =             c.text || '';
            this.playerClass =      c.playerClass || '';
            this.locale =           c.locale;
            this.rarity =           c.rarity || '';
            this.health =           c.health || 0;
            this.mechanics =        c.mechanics || [];
            this.faction =          c.faction || 'Neutral';
            this.elite =            c.elite || false;
            this.cost =             c.cost || 0;
            this.attack =           c.attack || 0;
            this.race =             c.race || '';
            this.img =              c.img || '';
            this.spellSchool =      c.spellSchool || '';
            this.flavor =           c.flavor || '';
            this.artist =           c.artist || '';
            this.collectible =      c.collectible || false;
            this.imgGold =          c.imgGold || '';
            this.durability =       c.durability || 0;
            this.howToGetGold =     c.howToGetGold || '';
            this.howToGet =         c.howToGet || '';
            this.armor =            c.armor || '';
            this.multiClassGroup =  c.multiClassGroup || '';
            this.classes =          c.classes || [];
            this.howToGetDiamond =  c.howToGetDiamond || '';
    }
}

export interface Card {
    id:               number;
    cardId:           string;
    dbfId:            string;
    name:             string;
    cardSet:          string;
    type?:            string;
    text?:            string;
    playerClass?:     string;
    locale:           string;
    rarity?:          string;
    health?:          number;
    mechanics?:       Mechanic[];
    faction?:         Faction;
    elite?:           boolean;
    cost?:            number;
    attack?:          number;
    race?:            Race;
    img?:             string;
    spellSchool?:     any;
    flavor?:          string;
    artist?:          string;
    collectible?:     boolean;
    imgGold?:         string;
    durability?:      number;
    howToGetGold?:    string;
    howToGet?:        string;
    armor?:           string;
    multiClassGroup?: string;
    classes?:         Class[];
    howToGetDiamond?: string;
}

export interface Mechanic {
    name: Name;
}

export enum CardSet {
    AshesOfOutland = `Ashes of Outland`,
    Battlegrounds = `Battlegrounds`,
    BlackrockMountain = `Blackrock Mountain`,
    Classic = `Classic`,
    Core = `Core`,
    Credits = `Credits`,
    DemonHunterInitiate = `Demon Hunter Initiate`,
    DescentOfDragons = `Descent of Dragons`,
    ForgedInTheBarrens = `Forged in the Barrens`,
    GalakrondSAwakening = `Galakrond's Awakening`,
    GoblinsVsGnomes = `Goblins vs Gnomes`,
    HallOfFame = `Hall of Fame`,
    HeroSkins = `Hero Skins`,
    JourneyToUnGoro = `Journey to Un'Goro`,
    KnightsOfTheFrozenThrone = `Knights of the Frozen Throne`,
    KoboldsCatacombs = `Kobolds & Catacombs`,
    Legacy = `Legacy`,
    MadnessAtTheDarkmoonFaire = `Madness At The Darkmoon Faire`,
    MeanStreetsOfGadgetzan = `Mean Streets of Gadgetzan`,
    Missions = `Missions`,
    Naxxramas = `Naxxramas`,
    OneNightInKarazhan = `One Night in Karazhan`,
    RastakhanSRumble = `Rastakhan's Rumble`,
    RiseOfShadows = `Rise of Shadows`,
    SaviorsOfUldum = `Saviors of Uldum`,
    ScholomanceAcademy = `Scholomance Academy`,
    TavernBrawl = `Tavern Brawl`,
    TavernsOfTime = `Taverns of Time`,
    TheBoomsdayProject = `The Boomsday Project`,
    TheGrandTournament = `The Grand Tournament`,
    TheLeagueOfExplorers = `The League of Explorers`,
    TheWitchwood = `The Witchwood`,
    Vanilla = `Vanilla`,
    WhispersOfTheOldGods = `Whispers of the Old Gods`,
}

export enum Class {
    DeathKnight = `Death Knight`,
    DemonHunter = `Demon Hunter`,
    Dream = `Dream`,
    Druid = `Druid`,
    Hunter = `Hunter`,
    Mage = `Mage`,
    Neutral = `Neutral`,
    Paladin = `Paladin`,
    Priest = `Priest`,
    Rogue = `Rogue`,
    Shaman = `Shaman`,
    Warlock = `Warlock`,
    Warrior = `Warrior`,
    Whizbang = `Whizbang`,
}

export enum Faction {
    Alliance = `Alliance`,
    Horde = `Horde`,
    Neutral = `Neutral`,
}

export enum Locale {
    EnUS = `enUS`,
}

export enum Name {
    AIMustPlay = `AIMustPlay`,
    Adapt = `Adapt`,
    AdjacentBuff = `AdjacentBuff`,
    AffectedBySpellPower = `AffectedBySpellPower`,
    Aura = `Aura`,
    Battlecry = `Battlecry`,
    BloodGem = `Blood Gem`,
    CastsWhenDrawn = `Casts When Drawn`,
    Charge = `Charge`,
    Combo = `Combo`,
    Corrupt = `Corrupt`,
    Deathrattle = `Deathrattle`,
    Discover = `Discover`,
    DivineShield = `Divine Shield`,
    Echo = `Echo`,
    Freeze = `Freeze`,
    Frenzy = `Frenzy`,
    ImmuneToSpellpower = `ImmuneToSpellpower`,
    Inspire = `Inspire`,
    InvisibleDeathrattle = `InvisibleDeathrattle`,
    Invoke = `Invoke`,
    JadeGolem = `Jade Golem`,
    Lifesteal = `Lifesteal`,
    Magnetic = `Magnetic`,
    Morph = `Morph`,
    NatureSpellDamage = `Nature Spell Damage`,
    OneTurnEffect = `OneTurnEffect`,
    Outcast = `Outcast`,
    Overkill = `Overkill`,
    Overload = `Overload`,
    Poisonous = `Poisonous`,
    Quest = `Quest`,
    Reborn = `Reborn`,
    Recruit = `Recruit`,
    Rush = `Rush`,
    Secret = `Secret`,
    Sidequest = `Sidequest`,
    Silence = `Silence`,
    SpellDamage = `Spell Damage`,
    Spellburst = `Spellburst`,
    Stealth = `Stealth`,
    Summoned = `Summoned`,
    Taunt = `Taunt`,
    Twinspell = `Twinspell`,
    Windfury = `Windfury`,
}

export enum Race {
    All = `All`,
    Beast = `Beast`,
    Demon = `Demon`,
    Dragon = `Dragon`,
    Elemental = `Elemental`,
    Mech = `Mech`,
    Murloc = `Murloc`,
    Pirate = `Pirate`,
    Quilboar = `Quilboar`,
    Totem = `Totem`,
}

export enum Rarity {
    Common = `Common`,
    Epic = `Epic`,
    Free = `Free`,
    Legendary = `Legendary`,
    Rare = `Rare`,
}

export enum SpellSchool {
    Arcane = `Arcane`,
    Fel = `Fel`,
    Fire = `Fire`,
    Frost = `Frost`,
    Holy = `Holy`,
    Nature = `Nature`,
    Shadow = `Shadow`,
}

export enum Type {
    Enchantment = `Enchantment`,
    Hero = `Hero`,
    HeroPower = `Hero Power`,
    Minion = `Minion`,
    Spell = `Spell`,
    Weapon = `Weapon`,
}
